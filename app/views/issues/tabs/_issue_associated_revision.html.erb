<div id="kod_surumleri">
  <% if @changesets.empty? %>
    <em>Henüz kod güncellemesi yapılmamış</em>
  <% end %>

  <% @changesets.each do |changeset| %>
    <div id="changeset-<%= changeset.id %>" class="changeset journal">
      <div class="note">
        <h4 class='note-header'>
          <div class="contextual">
            <%= link_to_revision(
                  changeset,
                  changeset.repository,
                  :text => "#{l(:label_revision)} #{changeset.format_identifier}",
                ) %>
            <% if changeset.filechanges.any? && User.current.allowed_to?(:browse_repository, changeset.project) %>
              (<%= link_to(l(:label_diff),
                           :controller => "repositories",
                           :action => "diff",
                           :id => changeset.project,
                           :repository_id => changeset.repository.identifier_param,
                           :path => "",
                           :rev => changeset.identifier) %>)
            <% end %>
          </div>
          <div>
            <%= avatar(changeset.user, :size => "24") %>
            <%= authoring changeset.committed_on, changeset.author, :label => :label_added_time_by %>
          </div>
        </h4>
        <div class="wiki changeset-comments"><%= format_changeset_comments changeset %></div>
        <div class="wiki changeset-comments">
          <% desired_artifact = artifacts.find { |item| item[:changeset_id].id == changeset.id } %>
          <% if desired_artifact %>
            <pre><%= MyPlugin::Hooks::IssueAssociatedRevision.format_artifacts_table(desired_artifact[:artifacts]) %></pre>
            <% all_artifacts = desired_artifact[:artifacts]["distros"].flat_map { |distro| distro['artifacts'] } %>
            <legend>
            <script>
              function open_jenkins_run(packageName, selectId){
                const JENKINS_URL="<%= jenkins[:url] %>"
                const JOB="<%= jenkins[:job] %>"
                const JOB_TOKEN="<%= jenkins[:job_token] %>"
                const [package, version] = packageName.split('_')
                const DEBIAN_PACKAGE=`${package}=${version}`
                const TARGET_SERVER=$('#'+selectId).val()

                const JOB_URL = `${JENKINS_URL}/${JOB}/buildWithParameters?token=${JOB_TOKEN}&DEBIAN_PACKAGE=${DEBIAN_PACKAGE}&openStackName=${TARGET_SERVER}`

                modal = window.open(JOB_URL, 'modal', 'width=500,height=500')
              }
            </script>
            <% all_artifacts.each.with_index do |artifact, index| %>
              <% if artifact.end_with?('.deb') %>
                <% package_name = File.basename(artifact) %>
                <label for='<%= "select_#{changeset.format_identifier}_#{index}" %>'><%= package_name %></label>
                <select id='<%= "select_#{changeset.format_identifier}_#{index}" %>'>
                  <% servers.each do |option| %>
                    <option value="<%= option %>"><%= option %></option>
                  <% end %>
                </select>
                <input 
                  type="button" 
                  value="Yükle" 
                  onclick="open_jenkins_run('<%= package_name %>', '<%= "select_#{changeset.format_identifier}_#{index}" %>');" />
              <% else %>
                <label><%= artifact %></label>
                <button disabled>Yükle</button>
              <% end %>
              <hr>
            <% end %>
            </legend>
            <pre>
              <%= "MyPlugin::Hooks::IssueAssociatedRevision.fetch_all_packages()" %>
            </pre>
          <% end %>
        </div>
      </div>
    </div>
    <%= call_hook(:view_issues_history_changeset_bottom, { :changeset => changeset }) %>
  <% end %>
</div>

<script>
console.log("my_plugin > issue_associated_revision");

function copyToClipboard(containerImage) {
  const textToCopy = `docker pull ${containerImage}`; // Kopyalanacak metni buraya girin
  const textarea = document.createElement("textarea");
  textarea.value = textToCopy;
  document.body.appendChild(textarea);
  textarea.select();
  document.execCommand("copy");
  document.body.removeChild(textarea);

  alert("Metin başarıyla clipboard'a kopyalandı!");
}

function issue_associated_revision() {
  let tabName = 'issue_associated_revision'
  let issueId=1
  url = `/issues/${issueId}?tab=test_results`;
  remote_url = `/my_plugin/${issueId}/tab/${tabName}`;
  // Tab'ın başlığını oluşturup sekmelerin yanına yerleştirelim
  let $tabCodeRevisionsHeader = $("<a />", {
    id: `tab-${tabName}`,
    class: "",
    onclick: `getRemoteTab('${tabName}', '${remote_url}', '${url}'); return false;`,
    href: `/issues/${issueId}?tab=${tabName}`,
    text: "Issue Code Revisions"
  });

  let $history = $("#history")
  let $history_ul = $history.find("div.tabs ul")
  $("<li>").html($tabCodeRevisionsHeader).appendTo($history_ul)

  let $tabContentCodeRevisionsHeader = $('<div>', {
    id: 'tab-content-issue_associated_revision',
    class: 'tab-content',
    title: 'Code revisions will be displayed in this section',
    style: 'display: none;'
  })
  // $tabContentCodeRevisionsHeader.html($("#kod_surumleri"))
  $("#kod_surumleri").appendTo($tabContentCodeRevisionsHeader)
  $tabContentCodeRevisionsHeader.appendTo($history);

  function testleriGetir() {
    $.get(`/my_plugin/issues/${issueId}/tests/`).then(
      tests => {
        window.$selectTests = $('#test_name_input').select2({
          tags: true,
          multiple: true,
          minimumInputLength: 1,
          data: tests,
          ajax: {
            url: '/my_plugin/tests',
            width: '100%',
            dataType: 'json',
            delay: 250,
            data: function (params) {
              return {
                q: params.term, // arama terimini gönderin
                page: params.page
              };
            },
            createSearchChoice: function (term) {
              return false;
            },
            noResults: function () {
              return 'No results found'
            },
            searching: function () {
              return 'Searching…'
            },
            processResults: function (data, params) {
              console.log(`>>> tests data: ${data} >>> params: ${params}`);
              // sonuçları dönüştürün ve select2 formatına uygun hale getirin
              if (data && Array.isArray(data) && data.length == 0) {
                results = []
              } else {
                results = data.map(function (d) { return { id: d, text: d } })
              }

              return {
                results,
                pagination: {
                  more: (params.page * 30) < data.total_count
                }
              };
            },
            cache: true
          }
        });

        window.$selectTests.on('select2:select', function (e) {
          console.log('>>> Seçildi');
          console.log(e);
          var data = e.params.data;
          console.log(data);
          $.post(`/my_plugin/issues/1/tests/${data.id}`, {}).done(r => { alert(`Test eklendi: ${r}`); });
        });

        window.$selectTests.on('select2:unselect', function (e) {
          console.log('>>> Silindi');
          console.log(e);
          var data = e.params.data;
          console.log(data);
          $.ajax({
            url: `/my_plugin/issues/1/tests/${data.id}`,
            type: 'DELETE',
            success: function (result) {
              alert('Kayıt Silindi!');
            }
          });
        });

        window.$selectTests.val(tests).trigger('change.select2');
      })
  }

}

$(document).ready(function () {
  issue_associated_revision();
});

</script>
